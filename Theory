14-01-2022

Day 1 of 90 Days Coding Challenge

Recursion: -
    When a function calls itself until a certain condition is satisfied is called as recursion.
If there is not a stopping condition then it is called infinite recursion.
Base case: - No more recursion can happen i.e the condition which stops the infinte loop of recursion is called base case
e.g of infinte recursion (Stack overflow): -
      void print()
      {
        cout<<1<<endl;
        print();
      }
      int main()
      {
        print();
        return 0;
       }
       
e.g of correct recursion: -
  cnt = 0;
  f()
  {
    if(cnt == 4)
    {
      return;
    }
    print(cnt);
    cnt++;
    f();
  }
  
  int main()
  {
    f();
  }
  
Basic recursion problem: -

Print name 5 times
#include <iostream>
using namespace std;
void f(int i, int n)
{
	if(i>n)
	{
		return;
	}
	cout<<"Deepa"<<endl;
	f(i+1, n);
}

int main()
{
	int n;
	cin>>n;
	f(1, n);
	return 0;
}                                                           

### Most correct way  ### Time Complexity is O(n)  ### Stack space is O(n)

Print linearly from 1 to N
#include <iostream>
using namespace std;

void print(int i, int n)
{
	if(i>n)
	{
		return;
	}
	cout<<i<<endl;
	print(i+1, n);
}

int main()
{
	int n;
	cin>>n;
	print(1, n);
	return 0;
}

 ### Time Complexity is O(n)  ### Stack space is O(n)

Print linearly from N to 1
#include <iostream>
using namespace std;

void f(int n)
{
	if(n<1)
	{
		return;
	}
	cout<<n<<endl;
	f(n-1);
}

int main()
{
	int n;
	cin>>n;
	f(n);
	return 0;
}

### Time Complexity is O(n)  ### Stack space is O(n)
 
Print 1 to N using back tracking
void print(int i, int n)				// Using Back tracking
{
	if(i<1)
	{
		return;
	}
	print(i-1, n);
	cout<<i<<endl;
}
int main()
{
	int n;
	cin>>n;
	print(n, n);
	return 0;
}

Print N to 1 using back tracking
void f(int i, int n)				// Using Back tracking
{
	if(i>n)
	{
		return;
	}
	f(i+1, n);
	cout<<i<<endl;
}
int main()
{
	int n;
	cin>>n;
	f(1, n);
	return 0;
}

Day 2

Sum of First N numbers using recursion
i) parameterized way
ii) using function

i) Parameterized way: -

void f(int i, int sum)
{
	if(i<1)
	{
		cout<<sum<<endl;
		return;
	}
	f(i-1, sum+i);
}

int main()
{
	int n;
	cin>>n;
	f(n, 0);
	return 0;
}

ii) Functional: -

int f(int n)
{
	if(n<1)
	{
		return 0;
	}
	return n+f(n-1);
}

int main()
{
	int n;
	cin>>n;
	cout<<f(n)<<endl;;
	return 0;
}

Factorial: -
#include <iostream>
using namespace std;

int fact(int n)
{
	if(n == 1)
	{
		return 1;
	}
	return n*fact(n-1);
}
int main()
{
	int n;
	cin>>n;
	cout<<fact(n)<<endl;
	return 0;
}

Reverse an array: -
// Using two pointer
void f(int l, int r, int a[])
{
	if(l>=r)
	{
		return;
	}
	int t = a[r];
	a[r] = a[l];
	a[l] = t;
	f(l+1, r-1, a);
}

int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i = 0; i<n; i++)
	{
		cin>>a[i];
	}
	f(0, n-1, a);
	for(int i = 0; i<n; i++)
	{
		cout<<a[i]<<" ";
	}
}

// Using two pointer
void f(int i, int a[], int n)
{
	if(i>=n/2)
	{
		return;
	}
	swap(a[i], a[n-i-1]);
	f(i+1, a, n);
}

int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i = 0; i<n; i++)
	{
		cin>>a[i];
	}
	f(0, a, n);
	for(int i = 0; i<n; i++)
	{
		cout<<a[i]<<" ";
	}
}

Day 3: -

Checking a string is pallindrome or not: -

bool f(string s, int i)
{
	if(i>s.size())
	{
		return true;
	}
	else if(s[i] != s[s.size() - i - 1])
	{
		return false;
	}
	f(s, i+1);
}

int main()
{
	string s;
	cin>>s;
	cout<<f(s, 0)<<endl;
	return 0;
}

Fibonnaci number: -

int fibonaci(int n)
{
	if(n == 0)
	{
		return 0;
	}
	else if(n == 1)
	{
		return 1;
	}
	return fibonaci(n-1) + fibonaci(n-2);;
}

int main()
{
	int n;
	cin>>n;
	cout<<fibonaci(n)<<endl;
	return 0;
}					// Complexity of multiple recursion is 2^n

Subsequence: -
	A contigous/ non-contiguous sequence, which follows the order
	for n = 3 length of array there are 8 subsequence
Power set is used to list all the subsequence of the array.

using recurison: -
void f(int idx, vector<int>&ds, vector<int> arr, int n)
{
	if(idx == n)
	{
		for(int i = 0; i<ds.size(); i++)
		{
			cout<<ds[i]<<" ";
		}
		if(ds.size() == 0)
		{
			cout<<"{}";
		}
		cout<<endl;
		return;
	}
	f(idx+1, ds, arr, n);  // Not pick
	ds.push_back(arr[idx]);
	f(idx+1, ds, arr, n); // pick
	ds.pop_back();
	
}

int main()
{
	int n;
	cin>>n;
	vector<int> arr;
	for(int i = 0; i<n; i++)
	{
		int a;
		cin>>a;
		arr.push_back(a);
	}
	vector<int> ds;
	f(0, ds,arr, n);
}

